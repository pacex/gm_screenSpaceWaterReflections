<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Camera control
hor_rotation = 0;
ver_rotation = 0;
distance = 50;

sensitivity = 0.8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT
d3d_start();
d3d_set_culling(false);
texture_set_repeat(true);
texture_set_interpolation(true);

/* MATRIX_INV_VIEW:
    inverse view matrix. Transforms view space vectors to world space vectors.
*/
globalvar MATRIX_INV_VIEW;
MATRIX_INV_VIEW = InverseMatrix4(matrix_get(matrix_view));

globalvar MATRIX_PROJ_VIEW;
MATRIX_PROJ_VIEW = matrix_multiply(matrix_get(matrix_projection), matrix_get(matrix_view));

/* Depth map global variables
    depth_map:             reference to the depth map surface
    sm_width, sm_height:    width and height of the shadow map surface
    lightViewProjMat:       product of the view and projection matrices
                            of the light source. Used in the sh_shaded shader.
*/
globalvar depth_map, dm_width, dm_height;
dm_width = window_get_width();
dm_height = window_get_height();

depth_map = surface_create(dm_width, dm_height);


/* Albedo map global variables
    albedo:                 reference to the albedo map surface
    alb_width, alb_height   width and height of the albedo map surface
*/
globalvar albedo, alb_width, alb_height;
alb_width = window_get_width();
alb_height = window_get_height();
albedo = surface_create(alb_width, alb_height);


/*Lighting global varliables
    light_direction:        3-element array defining the orientation of the directional light source.
*/
globalvar light_direction;
light_direction[0] = lengthdir_x(1, 160);
light_direction[1] = lengthdir_y(1, 160);
light_direction[2] = -0.2;                                       
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera control

//Zoom
distance += (mouse_wheel_down() - mouse_wheel_up()) * 4;
distance = max(1, distance);

//Rotate
if (mouse_check_button(mb_right)){
    
    //Disable cursor while rotating camera
    window_set_cursor(cr_none);

    if (!mouse_check_button_pressed(mb_right)){
        hor_rotation += (window_mouse_get_x() - window_get_width()/2) * sensitivity;
        ver_rotation -= (window_mouse_get_y() - window_get_height()/2) * sensitivity;
        hor_rotation = hor_rotation mod 360;
        ver_rotation = clamp(ver_rotation, -90, 90);
    }

    window_mouse_set(window_get_width()/2, window_get_height()/2);
}else{
    window_set_cursor(cr_default);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Light direction update

/* For demonstration purposes we rotate the directional lightsource
    around the scene at a downwards angle.
*/
/*
light_direction[0] = lengthdir_x(1, current_time * 0.01);
light_direction[1] = lengthdir_y(1, current_time * 0.01);
light_direction[2] = -0.2;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare albedo map render pass

if (surface_exists(albedo)){
    surface_reset_target();
    surface_set_target(albedo);

    /* Clear shadow map
        alpha channel must be set to zero to clear depth buffer!
    */
    draw_clear_alpha(c_black, 0);
    
    /* Set view and projection matrices
    */
    d3d_set_projection_ext(distance,0,0, 0,0,0, 0,0,1, 80, window_get_width() / window_get_height(), 1, 4096);
    
    var mat_hor_rotation = matrix_build(0,0,0, 0,0,hor_rotation, 1,1,1);
    var mat_ver_rotation = matrix_build(0,0,0, 0,ver_rotation,0, 1,1,1);
    
    var mat_transform = matrix_multiply(mat_hor_rotation, mat_ver_rotation);
    
    matrix_set(matrix_view, matrix_multiply(mat_transform, matrix_get(matrix_view)));
    
    //Calculate inverse view matrix for use in shaders
    MATRIX_INV_VIEW = InverseMatrix4(matrix_get(matrix_view));
    
    MATRIX_PROJ_VIEW = matrix_multiply(matrix_get(matrix_projection), matrix_get(matrix_view));
    
}else{
    //Create albedo map, if lost from memory.
    albedo = surface_create(alb_width, alb_height);
    show_debug_message("Created albedo map!");
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare depth map render pass

if (surface_exists(depth_map)){
    surface_set_target(depth_map);
    
    d3d_set_culling(true);
    
    /* Clear depth map
        alpha channel must be set to zero to clear depth buffer!
    */
    draw_clear_alpha(c_black, 0);
    
    //Set view and projection matrices
    d3d_set_projection_ext(distance,0,0, 0,0,0, 0,0,1, 80, window_get_width() / window_get_height(), 1, 4096);
    
    //Transfrom view matrix to fit current camera rotation
    mat_hor_rotation = matrix_build(0,0,0, 0,0,hor_rotation, 1,1,1);
    mat_ver_rotation = matrix_build(0,0,0, 0,ver_rotation,0, 1,1,1);
    
    mat_transform = matrix_multiply(mat_hor_rotation, mat_ver_rotation);
    
    matrix_set(matrix_view, matrix_multiply(mat_transform, matrix_get(matrix_view)));
    
    //Calculate inverse view matrix for use in shaders
    MATRIX_INV_VIEW = InverseMatrix4(matrix_get(matrix_view));
    
    MATRIX_PROJ_VIEW = matrix_multiply(matrix_get(matrix_projection), matrix_get(matrix_view));
    
    
    
}else{
    //Create depth map, if lost from memory.
    depth_map = surface_create(dm_width, dm_height);
    show_debug_message("Created depth map!");
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEINIT
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare additional Renderpasses
event_perform(ev_other,ev_user0);
with(obj_rendering){
    /* Shadow map render pass
        objects that to not draw anything during UserEvent0
        will not cast shadows.
    */
    event_perform(ev_other,ev_user0);
}

event_perform(ev_other,ev_user2);
with(obj_rendering){
    /* Albedo map render pass
        objects that to not draw anything during UserEvent2
        will not be reflected in screen space reflections.
    */
    event_perform(ev_other,ev_user2);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(albedo)){
    //draw_surface(albedo,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare main render pass

/* Draw directly onto the application surface.
    reset target from previous render passes
*/
surface_reset_target();

d3d_set_culling(true);

//Set view and projection matrices
d3d_set_projection_ext(distance,0,0, 0,0,0, 0,0,1, 80, window_get_width() / window_get_height(), 1, 4096);

//Transfrom view matrix to fit current camera rotation
mat_hor_rotation = matrix_build(0,0,0, 0,0,hor_rotation, 1,1,1);
mat_ver_rotation = matrix_build(0,0,0, 0,ver_rotation,0, 1,1,1);

mat_transform = matrix_multiply(mat_hor_rotation, mat_ver_rotation);

matrix_set(matrix_view, matrix_multiply(mat_transform, matrix_get(matrix_view)));

//Calculate inverse view matrix for use in shaders
MATRIX_INV_VIEW = InverseMatrix4(matrix_get(matrix_view));

MATRIX_PROJ_VIEW = matrix_multiply(matrix_get(matrix_view), matrix_get(matrix_projection));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
